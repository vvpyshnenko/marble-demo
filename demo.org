#+Title: Marble Testing
#+Author: Viktor Pyshnenko
#+Email: viktor.pyshnenko@jivygroup.com

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: cube
#+REVEAL_THEME: solarized
#+REVEAL_HLEVEL: 1
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by yjwen. </p>
#+REVEAL_PLUGINS: (markdown notes highlight)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./images/title_bg.png


* Agenda
:PROPERTIES:
:CUSTOM_ID: agenda
:END:
- Marble diagrams
- Marble testing notation
- Marble testing examples
- Testing subsrciption time points
- Limitations

* Marble diagram
:PROPERTIES:
:CUSTOM_ID: marble_diagram
:END:
Marble diagrams are a way to visually represent Observables
** Events
:PROPERTIES:
:CUSTOM_ID: marble_event
:END:
Marbles represent values of events being emitted by Observable
[[./images/diagram_events.png]]
** Time axis
:PROPERTIES:
:CUSTOM_ID: marble_time_axis
:END:
The passage of time is represented from left to right
[[./images/diagram_time_axis.png]]
** Complete marker
:PROPERTIES:
:CUSTOM_ID: marble_complete
:END:
A vertical line represents the completion of an Observable
[[./images/diagram_complete.png]]
** Operator
:PROPERTIES:
:CUSTOM_ID: marble_operator
:END:
Box represents operator that transforms an Observable
[[./images/diagram_operator.png]]
** Error marker
:PROPERTIES:
:CUSTOM_ID: marble_error
:END:
Cross sign represents an error emitted by output Observable
[[./images/diagram_error.png]]
* Marble testing Notation
:PROPERTIES:
:CUSTOM_ID: notation
:END:
Leverage marble diagrams to construct Observables

with just literal strings
** Marble Syntax
:PROPERTIES:
:CUSTOM_ID: marble_syntax
:END:
#+BEGIN_SRC js
// (dash) simulates the passage of time
'------'

// (pipe) emit end of stream
'------|'

// (pound) indicate an error
'------#'

// (alphanumeric) characters are values being emitted
// On frame 2 emit a, on frame 5 emit b, and on frame 8, complete
'--a--b--|'

//  On frame 2 emit a, on frame 5 emit b, and on frame 8, error
'--a--b--#'
#+END_SRC
** Sync groupings
:PROPERTIES:
:CUSTOM_ID: sync groupings
:END:
#+BEGIN_SRC js
// on frame 2 emit a, b, and c, then on frame 8 complete
'--(abc)-|'

// on frame 5 emit a and complete
'-----(a|)'
#+END_SRC
** Time progression syntax
:PROPERTIES:
:CUSTOM_ID: time_progression_syntax
:END:
#+BEGIN_SRC js
// on frame 0 emit a, on frame 10 emit b, 
// on frame 10,012 emit c, then on on frame 10,013 complete 
'a 9ms b 9s c'

// on frame 2 emit a, on frame 150,003 emit b and never complete 
'--a 2.5m b'
#+END_SRC
* Marble test examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
We can test our asynchronous RxJS code synchronously and deterministically
** Map
:PROPERTIES:
:CUSTOM_ID: example_map
:END:
#+BEGIN_SRC js
 describe('Map', () => {
    it('should add "1" to each value emitted', () => {
      const values = { a: 1, b: 2, c: 3, x: 2, y: 3, z: 4 };
      const source   = cold('-a-b-c-|', values);
      const expected = cold('-x-y-z-|', values);

      const result = source.pipe(map(x => x+1));
      expect(result).toBeObservable(expected);
    });
  })
#+END_SRC
** ConcatMap
:PROPERTIES:
:CUSTOM_ID: example_concatmap
:END:
#+BEGIN_SRC js
  describe('ConcatMap', () => {
    it('should maps values to inner observable and emits in order', () => {
      const values = { a: 10, b: 30, x: 20, y: 40 };
      const obs1     = cold('-a--------b------ab|', values);
      const obs2     = cold('a-a-a|', values);
      const expected = cold('-x-x-x----y-y-y--x-x-xy-y-y|', values);

      const result = obs1.pipe(concatMap(x => obs2.pipe(map(y => x + y))));
      expect(result).toBeObservable(expected);
    });
  });
#+END_SRC
** Delay
:PROPERTIES:
:CUSTOM_ID: example_delay
:END:
#+BEGIN_SRC js
import {cold, hot, time} from 'jest-marbles';

describe('Delay', () => {
    it('should waits 2 frames before receive the value', () => {
      const source = of('a').pipe(
        delay(time('--')),
      );
      const expected = cold('--(a|)');

      expect(source).toBeObservable(expected);
    });
  });
#+END_SRC
** When the test fails
:PROPERTIES:
:CUSTOM_ID: example_fail
:END:
#+BEGIN_SRC js
it('Should merge two hot observables', () => {
  const e1 = hot('----a--^--b-------c--|', {a: 0});
  const e2 = hot('  ---d-^--e---------f-----|', {a: 0});
  const expected = cold('---(be)----c-f-----|', {a: 0});

  expect(e1.pipe(merge(e2))).toBeObservable(expected);
});
#+END_SRC
Sample output when the test fails:
#+BEGIN_SRC js
// if change the expected result to '-d--(be)----c-f-----|'
Expected notifications to be:
  "-d--(be)----c-f-----|"
But got:
  "---(be)----c-f-----|"
#+END_SRC

* Test subscriptions
:PROPERTIES:
:CUSTOM_ID: subscriptions
:END:
It is possible to assert
that a Observable  was subscribed/unsubscribed to at the correct point in time.
** Syntax
:PROPERTIES:
:CUSTOM_ID: subscriptions_notation
:END:
#+BEGIN_SRC js
// '^' (caret) subscription point: 
//     shows the point in time at which a subscription happen.

// '!' (exclamation mark) unsubscription point:
//     shows the point in time at which a subscription is unsubscribed.

// no subscription ever happened
'-----' 
// a subscription happened after 2 "frames" of time passed,
//  and the subscription was not unsubscribed
'--^--'
// on frame 2 a subscription happened, and on frame 5 was unsubscribed
'--^--!-'
// on 500 ms subscription happened and lasts for 1 second
'500ms ^ 1s !'
#+END_SRC
** map
:PROPERTIES:
:CUSTOM_ID: subscriptions_map
:END:
#+BEGIN_SRC js
const a =   cold("--1--2--|");
const asub =     "^-------!";
const expected = "--2--3--|";

const result = a.map(s => `${Number(s) + 1}`);

expectObservable(result).toBe(expected);
expectSubscriptions(a.subscriptions).toBe(asub);
#+END_SRC
** concat
:PROPERTIES:
:CUSTOM_ID: subscriptions_concat
:END:
#+BEGIN_SRC js
const a =   cold("--1--2--|");
const b =   cold(        "--3--|");
const asub =     "^-------!";
const bsub =     "--------^----!";
const expected = "--1--2----3--|";

const result = a.concat(b);

expectObservable(result).toBe(expected);
expectSubscriptions(a.subscriptions).toBe(asub);
expectSubscriptions(b.subscriptions).toBe(bsub);
#+END_SRC
** Hot Observables
:PROPERTIES:
:CUSTOM_ID: subscriptions_hot
:END:
#+BEGIN_SRC js
const a =   cold("--1--2--|");
const b =    hot("^----3----4--|");
const asub =     "^-------!";
const bsub =     "--------^----!";
const expected = "--1--2----4--|";

const result = a.concat(b);

expectObservable(result).toBe(expected);
expectSubscriptions(a.subscriptions).toBe(asub);
expectSubscriptions(b.subscriptions).toBe(bsub);

// The hot observableâ€™s 3 is emitted prior to subscription,
// so it does not appear in the expected result
#+END_SRC
* Limitations
:PROPERTIES:
:CUSTOM_ID: limitation
:END:
** Only Async
:PROPERTIES:
:CUSTOM_ID: limitation_only_async
:END:
At this time the TestScheduler can only be used to test code that uses timers, like delay/debounceTime/etc
** delay(0) forbidden
:PROPERTIES:
:CUSTOM_ID: limitation_delay0
:END:
You also can't currently assert delays of zero, even with AsyncScheduler, e.g. delay(0)
** No Promises
:PROPERTIES:
:CUSTOM_ID: limitation_no_promises
:END:
 If the code consumes a Promise or does scheduling with AsapScheduler/AnimationFrameScheduler/etc it cannot be reliably tested 
** Synchronous Notification limitations
:PROPERTIES:
:CUSTOM_ID: limitation_sync
:END:
- each of the parenthesis-enclosed groups of values spans four actual frames
- there must be a sufficient number of frames separating the values
#+BEGIN_SRC js
const a =   cold("-1-----2----|");
const b =   cold("-3-----4----|");
const asub =     "^-----------!";
const bsub =     "^-----------!";
const expected = "-(13)--(24)-|";

const result = a.merge(b);

expectObservable(result).toBe(expected);
expectSubscriptions(a.subscriptions).toBe(asub);
expectSubscriptions(b.subscriptions).toBe(bsub);
#+END_SRC

* Thank you
:PROPERTIES:
:CUSTOM_ID: thanks
:END:
